Assignment 5
Image processing

Sevinch Noori
Aishu Vinod

- Our model, ImageEditor, loads in an image that can be in ppm, jpg, jpeg, and png format because
our model is null until an image is provided. Our image consists of pixels which are represented
as a 2D array because the image consists of a [width] and [height].
- Within an image, each pixel contains x and y which represents its coordinates in the 2D array
and also its red, green, and blue components.
- Our Pixel class makes up our 2D array to create the image. When the image is loaded, it is
temporarily stored in a Hashmap that allows the 2D array (the image) to be represented as a name,
represented by a String, that is chosen by the users.
- The view displays the image in terms of the pixelsâ€™ specific location and its color values. It
also creates a message that is displayed to the user.
- The controller complements the view by producing the image and messages that depend on the
successfulness of the function inputted by the user. The controller delegates the methods created
in the model to alter the images or make new images according to user input and transmits this
information to view. The controller then produces the view to the user.

Note
* most private and protected methods, fields, and classes are not exposed in this document
 We made a model, controller, and view as separate packages inside the source
 folder so that to ensure loose coupling and preserve the MVC pattern.

- If the user would like to add more functionality, they can make new interfaces that extend or
implement the IModel, IView, or IController interfaces and create classes that implement their
new interface.

Changes
- No changes were made to the design of our original code
- New methods were added to support the additionally requested functionality and some original
  methods were altered to perform better

Model
Classes and Interfaces:

IPixel
- We have an IPixel interface which designs all the methods we need to access a Pixel from an image
and work with it.

int getX( );
int getY( );
int getR( );
int getG( );
int getB( );


Pixel
- In our Pixel class, we define what a Pixel is and all of its components. We have getters in this
class since we use it to access the position and red, green, and blue components in other methods.
We have setters to set either all of the colors of each pixel to the same value or different ones.

public int getX( );
public int getY( );
public int getR( );
public int getG( );
public int getB( );
protected void setAllColors( );
protected void setNewColors( );


IModel
- We have the IModel interface which designs the image editor and provides functions that allows
the user to edit their image (ImageEditor class).

Updates :

We added a void apply(String kernelType, String newName) method
We added this method in the IModel interface because it had to be a public method in order for
the kernel class to be accessed within the method
We added a Pixel[ ][ ] retrieveImage( )  method
We added a void greyscale(String newName)
We added a void sepia(String newName)


- These methods were added into the IModel interface since they are used to enhance the image.
We chose not to create a new interface for these methods since our code is not closed to
modifications by us, the creators. This interface is open to being extended or implemented by
third party users.

ImageEditor
- We have the ImageEditor class which implements the IModel interface. We have getters for the
purpose of allowing other methods to access the amount of rows and columns. All operations to
edit images are displayed in this class.

public void load(String fileName, string newName);
public ImageEditor get(String image);
public int getRows( );
public int getCols( );
public Pixel getPixel(int row, int col);
public void redVisual(String newName);
public void greenVisual(String newName);
public void blueVisual(String newName );
public void Brighten(int brightener, String newName);
public void Darken(int darkener, String newName);
public void FlipHorizontal(String newName);
public void FlipVertical(String newName);
public void setValue(String newName);
public void setIntensity(String newName);
public void setLuma(String newName);

UPDATES:
public void apply(String kernelType, String newName);
public void greyscale(String newName);
We added a Pixel[ ][ ] retrieveImage( )  method
public void sepia(String newName);

- We added a void apply method which applies a given filter board to an image and produces a new
image with the filter on it which is stored in the hashmap
- If a user wants to add more functionality beyond blur and sharpen, they can add it on as an else
if statement inside the apply method. The apply method is public, so the user can do this in their
 own implementation of the method, if they wish to do so.
- A greyscale method which takes in a string name for the new file to be named as. This method
applies the greyscale filter to a given image.
- A sepia method which takes in a string name for the new file to be named as. This method applies
the greyscale filter to a given image.

- These methods were added into the IModel interface since they are used to enhance the image.
We chose not to create a new interface for these methods since our code is not closed to
modifications by us, the creators. This class is open to being extended by third party users.


- We have a package private kernels class which has no access modifiers because the kernel
matrixes do not need to be accessed by the client and only the model needs private access to the
kernel values within the apply method.

View

IView
Interface which designs the view outputted to the user by the controller.

TextView
- This class represents the methods that allow the controller to output a view of the model to the
user.
- We have two constructors where one takes in the model and the second one takes in the model
and the destination.
- An illegal argument exception is thrown if the model or destination is null.

public String Visualize( );
    This method visualizes the contents in the ppm file
public void renderImage( ) throws IOException;
       Displays the image
public void renderMessage( ) throws IOException;
   Displays a message

UPDATES:
public String toPPM();

- We added this functionality since in assignment 4, when we saved files, they were not in PPM
format. They were originally saved in the same manner as how the user views any image alteration.

- This method was added into the IView interface since it should have been in our original code
and it is used to produce an output when saving. We chose not to create a new interface for these
methods since our code is not closed to modifications by us, the creators. This interface is open
to being extended by third party users.


Controller

IController
- Interface which designs the controller for the image processor.

TextController
- This class reads user inputs and transmits the input to the model and the output is displayed
through the view. It performs the allocated method as called by the user. The constructor for
TextController throws an Illegal argument exception when the model, view or reader is null.

public void imageProcessor( )  throws IllegalArgumentException, IOException;
- The ImageProcessor method takes in an input from the user, reads it, carries out the required
operation, and outputs a message that tell the user whether their attempted operation worked
successfully or not.

Image Util
- Implements the command line usability by the user through the main method and also ensures that
any image inputted by the user to be operated on is in ppm format through the readPPM method.
- ReadPPM determines if the given file is in PPM format and it also pulls out all the pixels from
the image PPM and creates a 2D array of pixels to represent the image.

static Pixel[ ] [ ] readPPM(String filename);
// The readPPM method reads through the contents of each pixel in the file and returns the image
as a 2D array of Pixels given the width and height of the image. We decided to change the
return method here from void to a 2d array (of width and height) Pixel.

static void main(String [ ] args);
// Stores user inputs in an array list of strings


UPDATES:
public static Pixel[ ][ ] read(String filename);
- We added this read method which allows the program to read files other than PPM. It supports
jpeg, png, and bmp files. The method reads the image by going through the dimensions of the image
and retrieving the r, g, and b values This method is placed in the controller, ImageUtil class
because it will take care of the processing in our program between the user and program. This
public method takes care of reading files when it is loaded in by the user through the controller.

Inside our readPPM method, we added an additional check which checks that there is no empty space.
We added this to support loading and saving png files.

Script of Commands (also provided in the script file)

- Our command line can run a variety of inputs including loading, saving, a vertical flip, a
horizontal flip, brightening, darkening, getting the intensity, luma, or value, and getting the
red component, blue component, or green component.
- Some added features also include being able to blur or sharpen the image and also apply either a
sepia or greyscale filter to the image. You can run these script commands in the command line set
up through the main method to run these functions.
- All of these operations can be applied to ppm, jpg, png, and bpm image types.
- Our program supports loading an image as one image type and saving it as another

image.ppm is our ppm file that we use (made by ourselves)
the next name is the name for your new load image


RED COMPONENT
load  ./res/colorblock.ppm cb
red-component  cb red
save ./res/colorblock-red.ppm red

GREEN COMPONENT
load  ./res/colorblock.ppm cb
green-component  cb green
save ./res/colorblock-green.ppm green


BLUE COMPONENT
load  ./res/colorblock.ppm cb
blue-component  cb blue
save ./res/colorblock-blue.ppm blue


LUMA COMPONENT
load  ./res/colorblock.ppm cb
luma-component  cb luma
save ./res/colorblock-luma.ppm luma


INTENSITY COMPONENT
load  ./res/colorblock.ppm cb
intensity-component  cb intensity
save ./res/colorblock-intensity.ppm intensity


VALUE COMPONENT
load  ./res/colorblock.ppm cb
value-component  cb value
save ./res/colorblock-value.ppm value


VERTICAL FLIP
load  ./res/colorblock.ppm cb
vertical-flip  cb vflip
save ./res/colorblock-vertical.ppm vflip

HORIZONTAL FLIP
load  ./res/colorblock.ppm cb
horizontal-flip  cb hflip
save ./res/colorblock-horizontal.ppm hflip




BRIGHTEN
load  ./res/colorblock.ppm cb
brighten 20 cb brighten
save ./res/colorblock-brightened.ppm brighten



DARKEN
load  ./res/colorblock.ppm cb
darken 20 cb darken
save ./res/colorblock-darkened.ppm darken


BLUR
load ./res/googleSMALL.jpg j
blur j j-blur
save ./res/google-sharpen.jpg j-sharpen

SHARPEN
load ./res/googleSMALL.jpg j
sharpen j j-sharpen
save ./res/google-sharpen.jpg j-sharpen

SEPIA
load ./res/googleSMALL.jpg j
sepia j j-sepia
save ./res/google-sepia.jpg j-sepia

GREYSCALE
load ./res/googleSMALL.jpg j
greyscale j j-greyed
save ./res/google-greyscale.jpg j-greyed


Image Citation
The ppm file we have submitted is a 2 by 2 image with pixels that we made by ourselves.

Jpeg image
https://unsplash.com/assets/api/applications/devs/google-6a4028f6f5ea3e6ef1da633c850bdcc79c8ecaa
714c67b84c8ce205e88969ca1.jpg

Bmp image
https://www.smwcentral.net/?p=files&u=3309&newwindow=true

Png image
https://www.pngitem.com/middle/iiwRJTT_100-by-100-pixel-hd-png-download/



